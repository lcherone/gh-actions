name: CI

on: [push]

jobs:
  test-setup-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Test LXD action
        uses: lcherone/gh-actions/lxd@master
        with:
          remote: |
            {
              "name": "${{ secrets.LXD_REMOTE_NAME }}",
              "url": "${{ secrets.LXD_REMOTE_URL }}",
              "secret": "${{ secrets.LXD_REMOTE_SECRET }}",
              "protocol": "lxd",
              "auth-type": "tls"
            }
          script: |
            //
            core.info('Executing script from workfow')

            //
            core.info('exec inside remote container')
            await lxc.containers.exec(input.remote['name'], 'test-alpine', {
              "command": ["/bin/sh", "-c", "echo Hello from inside container on remote server"],
              "environment": {
                HOME: '/root',
                TERM: 'xterm',
                USER: 'root'
              },
              "wait-for-websocket": false,
              "record-output": true,
              "interactive": false,
              "width": 80,
              "height": 25
            })

            //
            core.info('fetching container logs from remote')
            let logs = await lxc.containers.logs.list(input.remote['name'], 'test-alpine')
            for (let i in logs) {
              let logfile = logs[i].split(/[\\/]/).pop()

              if (logfile.indexOf('exec_') === -1) {
                core.info('skipping log: ' + logfile)
                continue
              }

              core.info('fetching log: ' + logfile)
              result += await lxc.containers.logs.get(input.remote['name'], 'test-alpine', logfile)

              core.info('deleting log from remote: ' + logfile)
              await lxc.containers.logs.delete(input.remote['name'], 'test-alpine', logfile)
            }

          command: |
            lxc list ${{ secrets.LXD_REMOTE_NAME }}:
